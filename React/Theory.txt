React Practice

** what is difference in functional and class component with example
Ans: functional component is a javascript function that returns jsx.
functional component
function Welcome(props) {
    return <h1>Hello, {props.name}</h1>;
}
class component
ans: class component is a javascript class that extends react component and have render method that returns jsx.
class Welcome extends React.Component {
    render() {
        return <h1>Hello, {this.props.name}</h1>;
    }
}

========================================================

** what is controlled and uncontrolled component
Ans: controlled component is a component that is controlled by react states like useState or this.state.
example of controlled component
import { useState } from "react";

const ControlledInput = () => {
  const [text, setText] = useState("");

  return (
    <div>
      <input 
        type="text" 
        value={text} 
        onChange={(e) => setText(e.target.value)} 
      />
      <p>Input Value: {text}</p>
    </div>
  );
};

export default ControlledInput;
//=========> example of uncontrolled component:  and uncontrolled component is a component that is controlled by dom like useRef.
import { useState } from "react";

const UncontrolledInput = () => {
   const inputRef = useRef(null);

const handleSubmit = () => {
    alert(`Input Value: ${inputRef.current.value}`);
  };

  return (
    <div>
      <input 
        type="text" 
       ref={inputRef}
      />
    <button onClick={handleSubmit}>Submit</button>
    </div>
  );
};

========================================================

** what is state and props
Ans: props are immutable and state is mutable. props are passed from parent component to child component and state is managed within the component

========================================================

** what is react hooks
Ans: react hooks are functions that let you use state and other react features in functional components.

========================================================

** Dual binding and data flow

Ans: In React, dual binding (often referred to as two-way data binding) means that data can flow both ways â€” 
from the component state to the UI (view) and from the UI back to the component state.

React primarily uses one-way data binding, where data flows from parent to child components or from the state to the view. 
But in scenarios like form inputs, two-way data binding can be simulated.

const NameInput =  () => {

  const [name, setName] = useState('');

  const handleChange = (e) => {
    setName(e.target.value);
  };

  return(
    <>
    <input type="text" onChange={handleChange} value={name} />
    <h2>Hellow, {name}!</h2>
    </>
  );
}

ðŸ”„ Data Flow Explanation:
Initial Render:
name is an empty string.
Input field renders with value "".

User Types "Kapil":
onChange fires â†’ handleChange updates the state (setName("Kapil"))
React re-renders the component â†’ input now shows Kapil, and so does the <h2> tag.

flow=>
User Input â†’ onChange â†’ setState â†’ Component Renders â†’ Input Gets New Value â†’ ...

React by default follows one-way binding:
Props go from parent â†’ child
State drives the view (but not the other way around unless you set it up)
Two-way binding in React is not automatic like Angular â€” you control it manually via state and event handlers.

========================================================

** Two-way data flow between child and parent
Ans: In React, two-way data flow between child and parent is not built-in like it is in some frameworks (e.g., Angular). 
But yes â€” you can achieve it manually using a pattern called "lifting state up" or callback props.

// Parent Component
import { useState } from "react";
import Child from "./Child";

function Parent() {
  const [childData, setChildData] = useState("");

  const handleChildData = (data) => {
    setChildData(data); // Receive data from child
  };

  return (
    <div>
      <h2>Parent Component</h2>
      <p>Data from child: {childData}</p>
      <Child sendDataToParent={handleChildData} />
    </div>
  );
}

export default Parent;

//=========>

// Child Component
function Child({ sendDataToParent }) {
  const handleClick = () => {
    sendDataToParent("Hello from child!"); // Send data to parent
  };

  return (
    <div>
      <h3>Child Component</h3>
      <button onClick={handleClick}>Send Data to Parent</button>
    </div>
  );
}

export default Child;

ðŸ”„ Summary of Data Flow:
Parent â†’ Child: via props (sendDataToParent)
Child â†’ Parent: by calling the function passed as prop
Thatâ€™s controlled two-way communication â€” you just architect it explicitly.